[package]
name = "ariel-os-coap"
version = "0.1.0"
license.workspace = true
edition.workspace = true
repository.workspace = true

[dependencies]
coapcore = { path = "../lib/coapcore", default-features = false }
coap-handler = "0.2.0"
coap-handler-implementations = "0.5.0"
critical-section.workspace = true
embassy-futures = { workspace = true }
# These features should be more selective and not enabled here, but as things
# stand, this modules also contains the embedded-nal implementation for
# embassy-net, and that needs its features in sync; enabling them all ensures a
# working state until that NAL wrapper moves into embassy-net, where features
# will be in sync all the time.
embassy-net = { workspace = true, features = [
  "udp",
  "proto-ipv4",
  "proto-ipv6",
] }
embassy-sync.workspace = true
embedded-nal-async = "0.8"
embedded-nal-coap = { workspace = true }
lakers-crypto-rustcrypto = "0.7.2"
lakers = { version = "0.7.2", default-features = false }
ariel-os-debug.workspace = true
ariel-os-embassy = { workspace = true, features = ["net"] }
ariel-os-random = { workspace = true, features = ["csprng"] }
ariel-os-macros = { path = "../ariel-os-macros" }
static_cell = "2.1.0"

cfg-if = { workspace = true }

# FIXME: Should go out eventually
hexlit = "0.5.5"
cbor-macro = "0.1.0"
cboritem = "0.1.2"

# For the udp_nal
embedded-io-async = "0.6.1"

[lints]
workspace = true

[features]
# Enables the coap_run function through which a server is passed in. The
# crate setting this must call `ariel_os{_,::}coap::coap_run()`; if not set,
# that function is run with a default minimal server automatically (as is
# required by the implementation to have client functionality).
#
# At the feature level, this is a bit of a misnomer, could also be
# called "manual-server-start"; the name is chosen to align with
# laze's name for this (where coap-server makes more sense).
coap-server = []

coap-server-config-unprotected = []
coap-server-config-demokeys = []

# Plain feature forwards and selected by laze to fill up the default features on demand.
liboscore-provide-abort = ["coapcore/liboscore-provide-abort"]
liboscore-provide-assert = ["coapcore/liboscore-provide-assert"]

## Enables an arbitrary set of features in dependencies where dependencies fail
## if no features are configured at all.
doc = ["embassy-net/proto-ipv6", "embassy-net/medium-ip", "coap-server"]

## Enables defmt logging of coapcore
defmt = ["coapcore/defmt"]
